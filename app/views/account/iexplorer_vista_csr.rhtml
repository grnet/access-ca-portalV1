<% if request.user_agent =~ /Windows NT 6\./  %>
<object classid= "clsid:884e2049-217d-11da-b2a4-000e7bbb2b09" id="g_objClassFactory"></object>
   <!-- Test if the Enrollment Component has been loaded -->
<script type="text/vbscript" language="vbscript">
   On Error Resume Next
   Dim g_activexfailed
   g_activexfailed = 0  
   Dim enroll_temp
   Set enroll_temp = g_objClassFactory.CreateObject("X509Enrollment.CX509Enrollment")
   if err.number <> 0 then
        g_activexfailed = 1
   end if
</script>
<script type="text/javascript" language="javascript">
loader();
function loader()
{
   if(g_activexfailed)
   {
       alert("In order to complete certificate enrollment, you must first add this web address to Trusted sites in Internet Explorer.( Trusted sites can be managed on the Security Tab in Internet Options on the Tools menu).");
   }
}
</script>
<script LANGUAGE="VBScript" SRC="/javascripts/ieVistaCSR.vbs">
</script>

<% end %>

<% if error_messages_in_gr_for(:csr) != "" %>
<br />
<div class="error_box">
	<%= error_messages_in_gr_for(:csr) %>
</div>
<br />
<% end %>


<fieldset>
	<legend>Παραγωγή κλειδιού και αποστολή αιτήσεως στην Α.Π.</legend>
	<div class="blue_box">
	<p>
		Επιλέξτε το μέγεθος του προσωπικού κλειδιού που θέλετε να δημιουργήσετε
		και προχωρήστε στην αποστολή. 
	</p>
	<p>
		ΠΡΟΣΟΧΗ: Ο crypto provider που πρέπει να χρησιμοποιηθεί στον Internet
		Explorer είναι ο Microsoft Enhanced (προεπιλεγμένη τιμή)
	</p> 
	</div>
<% form_tag ({:action => 'submit_iexplorer_vista_csr'}, {:name => "GetData"}) do %>
	<input type="hidden" name="emailAddress" value="<%= @person.email %>">
<%
	if Certificate.find(:first, :conditions => ["owner_id = ? and owner_type = 'Person'", @person.id], :order => "id DESC")
	  person_cn = X509Certificate::CertificateReader.new(Certificate.find(:first, :conditions => ["owner_id =? and owner_type = 'Person'", @person.id], :order => "id DESC").body).certificate[:dnElements][3]["Value"]
	else 
	  person_cn = @person.first_name_en.capitalize + " " + @person.last_name_en.capitalize
	end
%>
	<input type="hidden" name="commonName" value="<%=person_cn %>">
	<input type="hidden" name="organizationName" value="HellasGrid">
<%
	if Certificate.find(:first, :conditions => ["owner_id = ? and owner_type = 'Person'", @person.id], :order => "id DESC")
	  person_ou = X509Certificate::CertificateReader.new(Certificate.find(:first, :conditions => ["owner_id =? and owner_type = 'Person'", @person.id], :order => "id DESC").body).certificate[:dnElements][2]["Value"]
	else 
	  person_ou = @person.organization.domain
	end
%>
	<input type="hidden" name="organizationalUnitName" value="<%= person_ou %>">
	<input type="hidden" name="countryName" value="GR">
	<input type="hidden" name="request" value="">
	<input type="hidden" name="newkey" value="">
	<label for="csp">Crypto Provider:</label></br />
	<select name="csp" class="textbox"></select>
	<input type="button" value="Αποστολή" name="submit_button" class="textbox" OnClick="GenReq()">
	<% end %>
</fieldset>
